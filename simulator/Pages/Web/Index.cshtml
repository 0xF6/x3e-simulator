<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>

<div id="container1" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
<div id="container2" style="min-width: 310px; height: 400px; margin: 0 auto"></div>


<script>
/**
 * In order to synchronize tooltips and crosshairs, override the
 * built-in events with handlers defined on the parent element.
 */
['mousemove', 'touchmove', 'touchstart'].forEach(function (eventType) {
    document.getElementById('container1').addEventListener(
        eventType,
        function (e) {
            var chart,
                point,
                i,
                event;

            for (i = 0; i < Highcharts.charts.length; i = i + 1) {
                chart = Highcharts.charts[i];
                // Find coordinates within the chart
                event = chart.pointer.normalize(e);
                // Get the hovered point
                point = chart.series[0].searchPoint(event, true);

                if (point) {
                    point.highlight(e);
                }
            }
        }
    );
    document.getElementById('container2').addEventListener(
        eventType,
        function (e) {
            var chart,
                point,
                i,
                event;

            for (i = 0; i < Highcharts.charts.length; i = i + 1) {
                chart = Highcharts.charts[i];
                // Find coordinates within the chart
                event = chart.pointer.normalize(e);
                // Get the hovered point
                point = chart.series[0].searchPoint(event, true);

                if (point) {
                    point.highlight(e);
                }
            }
        }
    );
});
/**
 * Override the reset function, we don't need to hide the tooltips and
 * crosshairs.
 */
 Highcharts.Pointer.prototype.reset = function () {
    return undefined;
};

/**
 * Highlight a point by showing tooltip, setting hover state and draw crosshair
 */
Highcharts.Point.prototype.highlight = function (event) {
    event = this.series.chart.pointer.normalize(event);
    this.onMouseOver(); // Show the hover marker
    this.series.chart.tooltip.refresh(this); // Show the tooltip
    this.series.chart.xAxis[0].drawCrosshair(event, this); // Show the crosshair
};
/**
 * Synchronize zooming through the setExtremes event handler.
 */
 function syncExtremes(e) {
    var thisChart = this.chart;

    if (e.trigger !== 'syncExtremes') { // Prevent feedback loop
        Highcharts.each(Highcharts.charts, function (chart) {
            if (chart !== thisChart) {
                if (chart.xAxis[0].setExtremes) { // It is null while updating
                    chart.xAxis[0].setExtremes(
                        e.min,
                        e.max,
                        undefined,
                        false,
                        { trigger: 'syncExtremes' }
                    );
                }
            }
        });
    }
}


Highcharts.chart('container1', {
  chart: {
    zoomType: 'x',
      type: 'area',
    panning: true,
        panKey: 'shift',
    scrollablePlotArea: {
            minWidth: 700
    },
    animation: Highcharts.svg, // don't animate in old IE
    //marginRight: 10,
    events: {
      load: function () {

        var series = this.series[0];
        setInterval(function () {
            $.getJSON("/api/v1/gate/temperature", (data) => {
                console.log(data);
                var x = (new Date()).getTime(), // current time
                y = parseInt(data);
                series.addPoint([x, y], true, true);
            });
        }, 1000);
      }
    }
  },
 boost: {
    enabled: true,
    useGPUTranslations: true,
    seriesThreshold: 1,
    debug: {
        timeSetup: true,
     }
  },
  time: {
    useUTC: false
  },

  title: {
    text: 'Temperature e3x Rod'
  },
  xAxis: {
    type: 'datetime',
    tickPixelInterval: 150,
    crosshair: false
  },
    yAxis: {
         startOnTick: true,
        endOnTick: false,
        opposite: false,
    title: {
      text: '\u00B0' + 'C'
    },
    plotLines: [{
      value: 0,
      width: 1,
      color: '#808080'
    }]
  },
  tooltip: {
    headerFormat: '<b>{point.y:.2f}{series.name}</b><br/>',
    pointFormat: '{point.x:%Y-%m-%d %H:%M:%S}'
  },
  legend: {
    enabled: true
  },
  exporting: {
    enabled: false
  },
    series: [{
          marker: {
            enabled: false
        },
        threshold: null,
    name: '\u00B0' + 'C',
    data: (function () {
      // generate an array of random data
      var data = [],
        time = (new Date()).getTime(),
        i;

      for (i = -69; i <= 0; i += 1) {
        data.push({
          x: time + i * 1000,
          y: 0
        });
      }
      return data;
    }())
  }],
  credits: {
        enabled: false
    },
   plotOptions: {
                line: {
                    animation: false,
                    marker: {
                        enabled: true,
                    },
                },
                series: {
                    stickyTracking: false,
                    dataGrouping: {
                        enabled: false,
                    },
                    showInNavigator: false,
                    turboThreshold: 0,
                },
            }
});


Highcharts.chart('container2', {
  chart: {
    type: 'spline',
    animation: Highcharts.svg, // don't animate in old IE
    marginRight: 10,
    events: {
      load: function () {

        var series1 = this.series[0];
        setInterval(function () {
            $.getJSON("/api/v1/gate/volume", (data) => {
                console.log(data);
                var x = (new Date()).getTime(), // current time
                y = parseInt(data);
                series1.addPoint([x, y], true, true);
            });
          }, 1000);

          var series2 = this.series[1];
        setInterval(function () {
            $.getJSON("/api/v1/gate/load", (data) => {
                console.log(data);
                var x = (new Date()).getTime(), // current time
                y = parseInt(data);
                series2.addPoint([x, y], true, true);
            });
        }, 1000);
      }
    }
  },

  time: {
    useUTC: false
  },

  title: {
    text: 'Volume e3x Rod'
  },
  xAxis: {
    type: 'datetime',
    tickPixelInterval: 250
  },
  yAxis: {
    title: {
      text: 'Unit'
    },
    plotLines: [{
      value: 0,
      width: 1,
      color: '#808080'
    }]
  },
  tooltip: {
    headerFormat: '<b>{point.y:.2f}{series.name}</b><br/>',
    pointFormat: '{point.x:%Y-%m-%d %H:%M:%S}'
  },
  legend: {
    enabled: true
  },
  exporting: {
    enabled: false
    },
  plotOptions: {
        series: {
            //animation: false
        }
    },
  series: [{
      name: 'Volume',
      shadow: true,
    data: (function () {
      var data = [],
        time = (new Date()).getTime(),
        i;

      for (i = -69; i <= 0; i += 1) {
        data.push({
          x: time + i * 1000,
          y: 0
        });
      }
      return data;
    }())
    },
      {
          name: 'Load',
          shadow: true,
          dashStyle: 'dash',
    data: (function () {
      var data = [],
        time = (new Date()).getTime(),
        i;

      for (i = -69; i <= 0; i += 1) {
        data.push({
          x: time + i * 1000,
          y: 0
        });
      }
      return data;
    }())
  }],
  credits: {
        enabled: false
    }
});</script>